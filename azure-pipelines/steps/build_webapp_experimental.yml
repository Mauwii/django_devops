parameters:
  - name: azureSubscription
    default: ${{ variables.azureSubscription }}
  - name: resourceGroupName
    default: ${{ variables.resourceGroupName }}
  - name: pythonVersion
    ${{ if eq(variables.pythonVersion, '') }}:
      default: '3.9'
    ${{ if ne(variables.pythonVersion, '') }}:
      default: ${{ variables.pythonVersion }}
  - name: projectRoot
    ${{ if eq(variables.projectRoot, '') }}:
      default: ${{ variables[System.DefaultWorkingDirectory] }}
    ${{ if ne(variables.projectRoot, '') }}:
      default: ${{ variables.projectRoot }}
  - name: debug
    type: boolean
    ${{ if ne(variables.debug, 'true' ) }}:
      default: false
    ${{ if eq(variables.debug, 'true') }}:
      default: true

steps:
  - task: AzurePowerShell@5
    displayName: 'Read Connection String'
    name: readAppInsights
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      ScriptType: 'InlineScript'
      Inline: |
        $appInsightResource = Get-AzApplicationInsights -ResourceGroupName "${{ parameters.resourceGroupName }}"
        $APPLICATIONINSIGHTS_CONNECTION_STRING = $appInsightResource.ConnectionString
        Write-Host "##vso[task.setvariable variable=connectionString;issecret=true]$APPLICATIONINSIGHTS_CONNECTION_STRING"
      azurePowerShellVersion: 'LatestVersion'
      pwsh: true

  - task: UsePythonVersion@0
    displayName: 'Use Python ${{ parameters.pythonVersion }}'
    inputs:
      versionSpec: ${{ parameters.pythonVersion }}

  - script: |
      python3 -m venv antenv
      source antenv/bin/activate
    workingDirectory: ${{ parameters.projectRoot }}
    displayName: 'Create antenv'

  - script: |
      source antenv/bin/activate
      python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
    workingDirectory: ${{ parameters.projectRoot }}

  - script: |
      source antenv/bin/activate
      antenv/bin/python -m pip install -r requirements.txt
    workingDirectory: ${{ parameters.projectRoot }}
    displayName: 'Install requirements'

  - ${{ if eq(parameters.debug, true) }}:
      - script: set
        displayName: Show Variables
        env:
          SECRET_KEY: ${{ variables.secretKey }}
          APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ variables.connectionString }}
          DJANGO_SUPERUSER_EMAIL: ${{ variables.DJANGO_SUPERUSER_EMAIL }}
          DJANGO_SUPERUSER_PASSWORD: ${{ variables.DJANGO_SUPERUSER_PASSWORD }}
          TESTVALUE: foo

      - task: PythonScript@0
        continueOnError: true
        displayName: Python print environ
        inputs:
          script: |
            import sys
            import os
            print(os.environ)
          workingDirectory: ${{ parameters.projectRoot }}
          pythonInterpreter: '${{ parameters.projectRoot }}/antenv/bin/python'
          scriptSource: inline
        env:
          SECRET_KEY: ${{ variables.secretKey }}
          APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ variables.connectionString }}
          DJANGO_SUPERUSER_EMAIL: ${{ variables.DJANGO_SUPERUSER_EMAIL }}
          DJANGO_SUPERUSER_PASSWORD: ${{ variables.DJANGO_SUPERUSER_PASSWORD }}

  - script: |
      source antenv/bin/activate
      export SECRET_KEY="$(secretKey)"
      export APPLICATIONINSIGHTS_CONNECTION_STRING="$(connectionString)"
      antenv/bin/python manage.py makemigrations
    workingDirectory: ${{ parameters.projectRoot }}
    displayName: 'Make Migrations'
    env:
      SECRET_KEY: ${{ variables.secretKey }}
      APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ variables.connectionString }}

  - script: |
      source antenv/bin/activate

      antenv/bin/python manage.py migrate
    workingDirectory: ${{ parameters.projectRoot }}
    displayName: 'Migrate'
    env:
      SECRET_KEY: '$(secretKey)'
      APPLICATIONINSIGHTS_CONNECTION_STRING: $(connectionString)

  - script: |
      export SECRET_KEY=$(secretKey)
      source antenv/bin/activate
      antenv/bin/python manage.py createsuperuser --noinput
    displayName: 'Create Superuser'
    workingDirectory: ${{ parameters.projectRoot }}
    env:
      SECRET_KEY: ${{ variables.secretKey }}
      APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ variables.connectionString }}
      DJANGO_SUPERUSER_EMAIL: ${{ variables.DJANGO_SUPERUSER_EMAIL }}
      DJANGO_SUPERUSER_PASSWORD: ${{ variables.DJANGO_SUPERUSER_PASSWORD }}
