{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Intro \u00b6 These are not, the greatest docs in the World this is just a Playground Welcome to the Docs of my DevOps / GitHub / Jira - Playground. I decided to host them on GitHub-Pages via MkDocs-Material . Tools/Frameworks \u00b6 I used a combination of these tools and frameworks to have a useful playground I can experiment with: GitHub to host repositories Azure-DevOps to run the yaml pipelines Jira to manage issues MkDocs-Material to host versionable documentation Expectations \u00b6 You should try to keep your expectations low, then you will be amazed even more while finding out about the things I am just finding out myself with this playground. graph LR; You[You] -->|when found<br>this Page| expectation{Expectations}; expectation{Expectations} -->|Low| Amazed(surely Amazed ); expectation{Expectations} -->|High| Disappointed(maybe Disappointed); Current Config \u00b6 This is the YAML file which was used to Configure the website you are currently viewing. mkdocs.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 # Copyright (c) 2022 Matthias Wild <mauwii@outlook.de> # Permission is hereby granted, free of charge, to any person obtaining a copy # of this software and associated documentation files (the \"Software\"), to # deal in the Software without restriction, including without limitation the # rights to use, copy, modify, merge, publish, distribute, sublicense, and/or # sell copies of the Software, and to permit persons to whom the Software is # furnished to do so, subject to the following conditions: # The above copyright notice and this permission notice shall be included in # all copies or substantial portions of the Software. # THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, # FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING # FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS # IN THE SOFTWARE. # Project information site_name : Azure-DevOps with GitHub-Repo site_url : !ENV [ SITE_URL , 'https://Mauwii.github.io/django_devops/' ] site_author : Matthias Wild site_description : >- Welcome to my Playground which I created to find out more about the possibilities when using a GitHub-Repo in Azure-DevOps to run YAML Files as Azure-Pipelines. Additionally Jira is used as Issue Tracker. # Repository repo_name : mauwii/django_devops repo_url : https://github.com/Mauwii/django_devops edit_uri : edit/main/docs/ # Copyright copyright : Copyright &copy; 2022 Matthias Wild # Configuration theme : name : null custom_dir : 'mkdocs-material/material' # 404 page static_templates : - 404.html # Necessary for search to work properly include_search_page : false search_index_only : true # Default values, taken from mkdocs_theme.yml language : en features : - content.code.annotate # - content.tabs.link - content.tooltips # - header.autohide - navigation.expand - navigation.indexes # - navigation.instant - navigation.sections - navigation.tabs - navigation.tabs.sticky - navigation.top - navigation.tracking - search.highlight - search.share - search.suggest # - toc.follow - toc.integrate palette : - media : '(prefers-color-scheme: light)' scheme : default toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - media : '(prefers-color-scheme: dark)' scheme : slate toggle : icon : material/toggle-switch name : Switch to light mode font : text : Roboto code : Roboto Mono favicon : 'assets/favicon.png' icon : logo : 'material/library' # Customization extra : social : - icon : fontawesome/brands/github-alt link : https://github.com/mauwii - icon : fontawesome/brands/keybase link : https://keybase.io/mauwi - icon : material/email-fast link : mailto:mauwii@outlook.de # Extensions markdown_extensions : - abbr - admonition - attr_list - def_list - footnotes - meta - md_in_html - toc : permalink : true - pymdownx.arithmatex : generic : true - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.details - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg - pymdownx.highlight : anchor_linenums : true - pymdownx.inlinehilite - pymdownx.keys - pymdownx.magiclink : repo_url_shorthand : true user : Mauwii repo : django_devops - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_code_format - pymdownx.snippets - pymdownx.tabbed : alternate_style : true - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde # Plugins plugins : - search - git-revision-date License \u00b6 Copyright \u00a9 2022 Matthias Wild mauwii@outlook.de Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Home"},{"location":"#intro","text":"These are not, the greatest docs in the World this is just a Playground Welcome to the Docs of my DevOps / GitHub / Jira - Playground. I decided to host them on GitHub-Pages via MkDocs-Material .","title":"Intro"},{"location":"#toolsframeworks","text":"I used a combination of these tools and frameworks to have a useful playground I can experiment with: GitHub to host repositories Azure-DevOps to run the yaml pipelines Jira to manage issues MkDocs-Material to host versionable documentation","title":"Tools/Frameworks"},{"location":"#expectations","text":"You should try to keep your expectations low, then you will be amazed even more while finding out about the things I am just finding out myself with this playground. graph LR; You[You] -->|when found<br>this Page| expectation{Expectations}; expectation{Expectations} -->|Low| Amazed(surely Amazed ); expectation{Expectations} -->|High| Disappointed(maybe Disappointed);","title":"Expectations"},{"location":"#current-config","text":"This is the YAML file which was used to Configure the website you are currently viewing. mkdocs.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 # Copyright (c) 2022 Matthias Wild <mauwii@outlook.de> # Permission is hereby granted, free of charge, to any person obtaining a copy # of this software and associated documentation files (the \"Software\"), to # deal in the Software without restriction, including without limitation the # rights to use, copy, modify, merge, publish, distribute, sublicense, and/or # sell copies of the Software, and to permit persons to whom the Software is # furnished to do so, subject to the following conditions: # The above copyright notice and this permission notice shall be included in # all copies or substantial portions of the Software. # THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, # FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING # FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS # IN THE SOFTWARE. # Project information site_name : Azure-DevOps with GitHub-Repo site_url : !ENV [ SITE_URL , 'https://Mauwii.github.io/django_devops/' ] site_author : Matthias Wild site_description : >- Welcome to my Playground which I created to find out more about the possibilities when using a GitHub-Repo in Azure-DevOps to run YAML Files as Azure-Pipelines. Additionally Jira is used as Issue Tracker. # Repository repo_name : mauwii/django_devops repo_url : https://github.com/Mauwii/django_devops edit_uri : edit/main/docs/ # Copyright copyright : Copyright &copy; 2022 Matthias Wild # Configuration theme : name : null custom_dir : 'mkdocs-material/material' # 404 page static_templates : - 404.html # Necessary for search to work properly include_search_page : false search_index_only : true # Default values, taken from mkdocs_theme.yml language : en features : - content.code.annotate # - content.tabs.link - content.tooltips # - header.autohide - navigation.expand - navigation.indexes # - navigation.instant - navigation.sections - navigation.tabs - navigation.tabs.sticky - navigation.top - navigation.tracking - search.highlight - search.share - search.suggest # - toc.follow - toc.integrate palette : - media : '(prefers-color-scheme: light)' scheme : default toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - media : '(prefers-color-scheme: dark)' scheme : slate toggle : icon : material/toggle-switch name : Switch to light mode font : text : Roboto code : Roboto Mono favicon : 'assets/favicon.png' icon : logo : 'material/library' # Customization extra : social : - icon : fontawesome/brands/github-alt link : https://github.com/mauwii - icon : fontawesome/brands/keybase link : https://keybase.io/mauwi - icon : material/email-fast link : mailto:mauwii@outlook.de # Extensions markdown_extensions : - abbr - admonition - attr_list - def_list - footnotes - meta - md_in_html - toc : permalink : true - pymdownx.arithmatex : generic : true - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.details - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg - pymdownx.highlight : anchor_linenums : true - pymdownx.inlinehilite - pymdownx.keys - pymdownx.magiclink : repo_url_shorthand : true user : Mauwii repo : django_devops - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_code_format - pymdownx.snippets - pymdownx.tabbed : alternate_style : true - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde # Plugins plugins : - search - git-revision-date","title":"Current Config"},{"location":"#license","text":"Copyright \u00a9 2022 Matthias Wild mauwii@outlook.de Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"reference/","text":"Usefull Links \u00b6 Official Documentation \u00b6 For a full list of most recent MkDocs-Material References have a look in the official Documentation . If you want to find out more about how to configure MkDocs-Material to use Diagrams you can do so here . Mermaid Live Editor \u00b6 If you want to get started with Mermaid Diagrams, or already use them for your Project, I recommend to take a look at the Mermaid live Editor , which is pretty helpflull for newbes as well as advanced users.","title":"Reference"},{"location":"reference/#usefull-links","text":"","title":"Usefull Links"},{"location":"reference/#official-documentation","text":"For a full list of most recent MkDocs-Material References have a look in the official Documentation . If you want to find out more about how to configure MkDocs-Material to use Diagrams you can do so here .","title":"Official Documentation"},{"location":"reference/#mermaid-live-editor","text":"If you want to get started with Mermaid Diagrams, or already use them for your Project, I recommend to take a look at the Mermaid live Editor , which is pretty helpflull for newbes as well as advanced users.","title":"Mermaid Live Editor"},{"location":"reference/diagrams/","text":"Diagrams help to communicate complex relationships and interconnections between different technical components, and are a great addition to project documentation. Material for MkDocs integrates with Mermaid.js , a very popular and flexible solution for drawing diagrams. Usage \u00b6 Using flowcharts \u00b6 Flowcharts are diagrams that represent workflows or processes. The steps are rendered as nodes of various kinds and are connected by edges, describing the necessary order of steps: Flow chart ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; Using sequence diagrams \u00b6 Sequence diagrams describe a specific scenario as sequential interactions between multiple objects or actors, including the messages that are exchanged between those actors: Sequence diagram ``` mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Using state diagrams \u00b6 State diagrams are a great tool to describe the behavior of a system, decomposing it into a finite number of states, and transitions between those states: State diagram ``` mermaid stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] ``` stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Using class diagrams \u00b6 Class diagrams are central to object oriented programing, describing the structure of a system by modelling entities as classes and relationships between them: Class diagram ``` mermaid classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } ``` classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } Using entity-relationship diagrams \u00b6 An entity-relationship diagram is composed of entity types and specifies relationships that exist between entities. It describes inter-related things in a specific domain of knowledge: Entity-relationship diagram ``` mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses Other diagram types \u00b6 Besides the diagram types listed above, Mermaid.js provides support for pie charts , gantt charts , user journeys , git graphs and requirement diagrams , all of which are not officially supported by Material for MkDocs. Those diagrams should still work as advertised by Mermaid.js , but we don't consider them a good choice, mostly as they don't work well on mobile.","title":"Diagrams"},{"location":"reference/diagrams/#usage","text":"","title":"Usage"},{"location":"reference/diagrams/#using-flowcharts","text":"Flowcharts are diagrams that represent workflows or processes. The steps are rendered as nodes of various kinds and are connected by edges, describing the necessary order of steps: Flow chart ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!];","title":"Using flowcharts"},{"location":"reference/diagrams/#using-sequence-diagrams","text":"Sequence diagrams describe a specific scenario as sequential interactions between multiple objects or actors, including the messages that are exchanged between those actors: Sequence diagram ``` mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good!","title":"Using sequence diagrams"},{"location":"reference/diagrams/#using-state-diagrams","text":"State diagrams are a great tool to describe the behavior of a system, decomposing it into a finite number of states, and transitions between those states: State diagram ``` mermaid stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] ``` stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*]","title":"Using state diagrams"},{"location":"reference/diagrams/#using-class-diagrams","text":"Class diagrams are central to object oriented programing, describing the structure of a system by modelling entities as classes and relationships between them: Class diagram ``` mermaid classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } ``` classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() }","title":"Using class diagrams"},{"location":"reference/diagrams/#using-entity-relationship-diagrams","text":"An entity-relationship diagram is composed of entity types and specifies relationships that exist between entities. It describes inter-related things in a specific domain of knowledge: Entity-relationship diagram ``` mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses","title":"Using entity-relationship diagrams"},{"location":"reference/diagrams/#other-diagram-types","text":"Besides the diagram types listed above, Mermaid.js provides support for pie charts , gantt charts , user journeys , git graphs and requirement diagrams , all of which are not officially supported by Material for MkDocs. Those diagrams should still work as advertised by Mermaid.js , but we don't consider them a good choice, mostly as they don't work well on mobile.","title":"Other diagram types"},{"location":"reference/images/","text":"only-light / only-dark \u00b6 Switch Theme and get amazed","title":"Images"},{"location":"reference/images/#only-light-only-dark","text":"Switch Theme and get amazed","title":"only-light / only-dark"},{"location":"todo/","text":"Documentation \u00b6 integrate publish_docs into azure-pipelines.yml update workflow chart and Diagrams update GitGraph Example Update Documentation (ongoing ) Build MkDocs for main branch as well, not sure if this will need mike to work properly or if I can have more Gh-Pages Environments (for free...). Currently I am building MkDocs in main Branch as well, but not publishing it, to make sure it is buildable before allowing a PullRequest to be merged. Azure-Pipelines \u00b6 Use a naming Convention maybe even test if it is followed by RegEx use variables for default parameters in pipeline-templates Overwrite YAML Triggers for Main pipeline (azure-pipeline.yml) to prevent running it from other Branches (still open since unsure if even necesarry) Add Check to PR-Validation ,before building the WebApp, to see if the Resources already exist, since keys get read out while building the App, which is failing if they don't exist at all alternative option would be to have those stuff in a keyvault Create branch dependent Variable Templates which could be selected via expressions Ideas \u00b6 Since the Human Brain not always works as well as cloud-storage, I will write down some Ideas here. This also has the Advantage that other's could directly correct or improve them, or maybe even take advantage from them as well create a src older and move submodules of mkdocs-material and django_webapp into it search/replace old file path with the new one","title":"ToDo"},{"location":"todo/#documentation","text":"integrate publish_docs into azure-pipelines.yml update workflow chart and Diagrams update GitGraph Example Update Documentation (ongoing ) Build MkDocs for main branch as well, not sure if this will need mike to work properly or if I can have more Gh-Pages Environments (for free...). Currently I am building MkDocs in main Branch as well, but not publishing it, to make sure it is buildable before allowing a PullRequest to be merged.","title":" Documentation"},{"location":"todo/#azure-pipelines","text":"Use a naming Convention maybe even test if it is followed by RegEx use variables for default parameters in pipeline-templates Overwrite YAML Triggers for Main pipeline (azure-pipeline.yml) to prevent running it from other Branches (still open since unsure if even necesarry) Add Check to PR-Validation ,before building the WebApp, to see if the Resources already exist, since keys get read out while building the App, which is failing if they don't exist at all alternative option would be to have those stuff in a keyvault Create branch dependent Variable Templates which could be selected via expressions","title":" Azure-Pipelines"},{"location":"todo/#ideas","text":"Since the Human Brain not always works as well as cloud-storage, I will write down some Ideas here. This also has the Advantage that other's could directly correct or improve them, or maybe even take advantage from them as well create a src older and move submodules of mkdocs-material and django_webapp into it search/replace old file path with the new one","title":" Ideas"},{"location":"workflow/1-repository/","text":"In this Section you will find Informations related to the Workflow of the Repository. Branching Strategy \u00b6 Table \u00b6 instance Branch name accept PR from Create From other infos working branch main feature/* issue/* hotfix Pull-Request Require linear history Require status checks to pass before merging Require branches to be up to date before merging Dev feature/* issue/* main Head of main must be up to date with main for PR hotfix hotfix/* - Head of Production Production Production main hotfix Pull-Request Main branch is used as the working branch. To develope new features, create branch from main branch called feature/<jira-id>-<feature-name> for new features, or issue/<jira-id> when solving a issue. When development of the feature or issue is done, merge it back into the main branch with a pull request. When time has come for a release, create a pull request to merge main into Production. For bigger problems, like f.E. a zero-day, create a branch from Production and name it hotfix/<jira-id> and try to fix the issue asap. When done, merge this hotfix back into stable as well as into main. Diagrams \u00b6 Small \u00b6 graph LR dev --> main; main -.-> dev; main --> production; production -.-> hotfix; hotfix --> production & main; Detailed \u00b6 From Dev to Main \u00b6 graph LR Code[/Write Code\\] -- Commit<br>Changes --> FeatureBranch[Feature Branch]; MainBranch -. Create new Branch .-> FeatureBranch[Feature Branch]; FeatureBranch -- Pull<br>Request --> MainBranch[Main Branch]; MainBranch -- Trigger<br>Build --> CheckFeature{Built<br>succesfull}; CheckFeature -- Yes --> CompletePR[/Complete PR/]; CheckFeature -- No --> TryFixBugsFeature{Try to<br>fix bugs};; TryFixBugsFeature -- Yes --> Code; TryFixBugsFeature -- No --> DeleteFeatureBranch[\\Delete Feature Branch\\]; CompletePR --> DeleteFeatureBranch From Main to Prod \u00b6 incomplete graph LR MainBranch[Main Branch] -- Pull Request --> ProductionBranch; ProductionBranch[Production<br>branch] -- Trigger<br>Build --> CheckPrProduction{Built<br>succesfull}; CheckPrProduction -- yes --> CompleteMergeProduction[/Complete PR/]; CompleteMergeProduction --> DeployProduction[/Deploy<br>to Production/]; CheckPrProduction -- No --> TryFixBugsProduction[Fix Bugs]; GitGraph example \u00b6 gitGraph commit branch production checkout production checkout main branch feature-1 checkout feature-1 commit checkout main merge feature-1 checkout production merge main checkout main branch feature-2 checkout feature-2 commit checkout main branch feature-3 checkout feature-3 commit commit checkout feature-2 commit checkout main merge feature-2 checkout production merge main checkout feature-3 commit commit checkout main checkout production branch hotfix-1 commit checkout production merge hotfix-1 checkout main merge hotfix-1 checkout main checkout feature-3 merge main checkout main merge feature-3 checkout production merge main Automation \u00b6 Of course the approach is to have as much automated as possible, which also means that pull-request should in the end get tested and resolved by themselves (...or the help of Azure-Pipelines )","title":"Repository"},{"location":"workflow/1-repository/#branching-strategy","text":"","title":"Branching Strategy"},{"location":"workflow/1-repository/#table","text":"instance Branch name accept PR from Create From other infos working branch main feature/* issue/* hotfix Pull-Request Require linear history Require status checks to pass before merging Require branches to be up to date before merging Dev feature/* issue/* main Head of main must be up to date with main for PR hotfix hotfix/* - Head of Production Production Production main hotfix Pull-Request Main branch is used as the working branch. To develope new features, create branch from main branch called feature/<jira-id>-<feature-name> for new features, or issue/<jira-id> when solving a issue. When development of the feature or issue is done, merge it back into the main branch with a pull request. When time has come for a release, create a pull request to merge main into Production. For bigger problems, like f.E. a zero-day, create a branch from Production and name it hotfix/<jira-id> and try to fix the issue asap. When done, merge this hotfix back into stable as well as into main.","title":"Table"},{"location":"workflow/1-repository/#diagrams","text":"","title":"Diagrams"},{"location":"workflow/1-repository/#small","text":"graph LR dev --> main; main -.-> dev; main --> production; production -.-> hotfix; hotfix --> production & main;","title":"Small"},{"location":"workflow/1-repository/#detailed","text":"","title":"Detailed"},{"location":"workflow/1-repository/#from-dev-to-main","text":"graph LR Code[/Write Code\\] -- Commit<br>Changes --> FeatureBranch[Feature Branch]; MainBranch -. Create new Branch .-> FeatureBranch[Feature Branch]; FeatureBranch -- Pull<br>Request --> MainBranch[Main Branch]; MainBranch -- Trigger<br>Build --> CheckFeature{Built<br>succesfull}; CheckFeature -- Yes --> CompletePR[/Complete PR/]; CheckFeature -- No --> TryFixBugsFeature{Try to<br>fix bugs};; TryFixBugsFeature -- Yes --> Code; TryFixBugsFeature -- No --> DeleteFeatureBranch[\\Delete Feature Branch\\]; CompletePR --> DeleteFeatureBranch","title":"From Dev to Main"},{"location":"workflow/1-repository/#from-main-to-prod","text":"incomplete graph LR MainBranch[Main Branch] -- Pull Request --> ProductionBranch; ProductionBranch[Production<br>branch] -- Trigger<br>Build --> CheckPrProduction{Built<br>succesfull}; CheckPrProduction -- yes --> CompleteMergeProduction[/Complete PR/]; CompleteMergeProduction --> DeployProduction[/Deploy<br>to Production/]; CheckPrProduction -- No --> TryFixBugsProduction[Fix Bugs];","title":"From Main to Prod"},{"location":"workflow/1-repository/#gitgraph-example","text":"gitGraph commit branch production checkout production checkout main branch feature-1 checkout feature-1 commit checkout main merge feature-1 checkout production merge main checkout main branch feature-2 checkout feature-2 commit checkout main branch feature-3 checkout feature-3 commit commit checkout feature-2 commit checkout main merge feature-2 checkout production merge main checkout feature-3 commit commit checkout main checkout production branch hotfix-1 commit checkout production merge hotfix-1 checkout main merge hotfix-1 checkout main checkout feature-3 merge main checkout main merge feature-3 checkout production merge main","title":"GitGraph example"},{"location":"workflow/1-repository/#automation","text":"Of course the approach is to have as much automated as possible, which also means that pull-request should in the end get tested and resolved by themselves (...or the help of Azure-Pipelines )","title":"Automation"},{"location":"workflow/2-azure-pipelines/","text":"This is the YAML File which defined the main Pipeline when Released to Production. Most Parts of it are referencing Templates which are located bellow the subfolder /azure-pipelines It is reflecting the choosen Branching-Strategy you'll find in the previous Section. azure-pipelines.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 trigger : batch : true branches : include : - refs/heads/production - refs/heads/main - feature/* - issue/* exclude : - feature/experimental/* pr : branches : include : - production - main variables : - group : django_gh - name : isMain value : $[eq(variables['Build.SourceBranch'], 'refs/heads/main')] readonly : true - name : isProduction value : $[eq(variables['Build.SourceBranch'], 'refs/heads/production')] readonly : true - name : isPullRequest value : $[eq(variables['Build.Reason'], 'PullRequest')] readonly : true - name : pythonVersion value : '3.9' readonly : true - name : resourceGroupName value : 'django_gh' readonly : true - name : location value : 'westeurope' readonly : true - name : azureSubscription value : 'django_gh' readonly : true - name : vmImageName value : 'ubuntu-latest' readonly : true pool : vmImage : $(vmImageName) stages : - stage : validateBicep dependsOn : displayName : Validate Bicep jobs : - template : azure-pipelines/jobs/validate_bicep.yml - stage : createResources displayName : Create Azure Resources dependsOn : validateBicep condition : and(succeeded(), eq(variables.isProduction, 'True')) jobs : - deployment : DeployBicep displayName : Create Azure Resources environment : $(environmentName) strategy : runOnce : deploy : steps : - template : azure-pipelines/jobs/steps/deploy_bicep.yml - stage : Testing dependsOn : createResources condition : in(dependencies.createResources.result, 'Succeeded', 'Skipped') displayName : Run runTests variables : - group : django-dev jobs : - job : runTests displayName : run python tests steps : - template : azure-pipelines/jobs/steps/checkout_submodules.yml parameters : submodule : django_webapp - template : azure-pipelines/jobs/steps/python_django_test.yml parameters : PYTHON_VERSIONS : - $(pythonVersion) - stage : WebApp dependsOn : Testing condition : in(dependencies.Testing.result, 'Succeeded') jobs : - job : BuildWebApp displayName : Build Web App steps : - template : azure-pipelines/jobs/steps/python_django_export_projectroot.yml - template : azure-pipelines/jobs/steps/get_appinsights_con_str.yml - template : azure-pipelines/jobs/steps/build_webapp.yml - deployment : DeployDjango dependsOn : BuildWebApp condition : eq(variables.isProduction, 'True') displayName : Deploy Django to WebApp environment : $(environmentName) strategy : runOnce : deploy : steps : - template : azure-pipelines/jobs/steps/deploy_webapp.yml - stage : MkDocs dependsOn : WebApp condition : in(dependencies.WebApp.result, 'Succeeded') jobs : - job : buildMkDocs displayName : Build MkDocs-Material dependsOn : condition : eq(variables.isMain, 'False') steps : - template : azure-pipelines/jobs/steps/checkout_submodules.yml parameters : submodule : mkdocs-material - template : azure-pipelines/jobs/steps/build_mkdocs.yml - job : deployMkDocs displayName : Deploy MkDocs dependsOn : condition : eq(variables.isMain, 'True') steps : - template : azure-pipelines/jobs/steps/checkout_submodules.yml parameters : submodule : mkdocs-material - template : azure-pipelines/jobs/steps/build_mkdocs.yml - task : Bash@3 displayName : Deploy to GitHub-Pages inputs : targetType : 'inline' script : 'mkdocs gh-deploy --force --clean'","title":"Azure-Pipelines"}]}